/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace OptimisticOracleV3Interface {
  export type EscalationManagerSettingsStruct = {
    arbitrateViaEscalationManager: boolean;
    discardOracle: boolean;
    validateDisputers: boolean;
    assertingCaller: AddressLike;
    escalationManager: AddressLike;
  };

  export type EscalationManagerSettingsStructOutput = [
    arbitrateViaEscalationManager: boolean,
    discardOracle: boolean,
    validateDisputers: boolean,
    assertingCaller: string,
    escalationManager: string
  ] & {
    arbitrateViaEscalationManager: boolean;
    discardOracle: boolean;
    validateDisputers: boolean;
    assertingCaller: string;
    escalationManager: string;
  };

  export type AssertionStruct = {
    escalationManagerSettings: OptimisticOracleV3Interface.EscalationManagerSettingsStruct;
    asserter: AddressLike;
    assertionTime: BigNumberish;
    settled: boolean;
    currency: AddressLike;
    expirationTime: BigNumberish;
    settlementResolution: boolean;
    domainId: BytesLike;
    identifier: BytesLike;
    bond: BigNumberish;
    callbackRecipient: AddressLike;
    disputer: AddressLike;
  };

  export type AssertionStructOutput = [
    escalationManagerSettings: OptimisticOracleV3Interface.EscalationManagerSettingsStructOutput,
    asserter: string,
    assertionTime: bigint,
    settled: boolean,
    currency: string,
    expirationTime: bigint,
    settlementResolution: boolean,
    domainId: string,
    identifier: string,
    bond: bigint,
    callbackRecipient: string,
    disputer: string
  ] & {
    escalationManagerSettings: OptimisticOracleV3Interface.EscalationManagerSettingsStructOutput;
    asserter: string;
    assertionTime: bigint;
    settled: boolean;
    currency: string;
    expirationTime: bigint;
    settlementResolution: boolean;
    domainId: string;
    identifier: string;
    bond: bigint;
    callbackRecipient: string;
    disputer: string;
  };
}

export interface OptimisticOracleV3Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "assertTruth"
      | "assertTruthWithDefaults"
      | "assertions"
      | "burnedBondPercentage"
      | "cachedCurrencies"
      | "cachedIdentifiers"
      | "cachedOracle"
      | "defaultCurrency"
      | "defaultIdentifier"
      | "defaultLiveness"
      | "disputeAssertion"
      | "finder"
      | "getAssertion"
      | "getAssertionResult"
      | "getCurrentTime"
      | "getMinimumBond"
      | "multicall"
      | "numericalTrue"
      | "owner"
      | "renounceOwnership"
      | "setAdminProperties"
      | "settleAndGetAssertionResult"
      | "settleAssertion"
      | "stampAssertion"
      | "syncUmaParams"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminPropertiesSet"
      | "AssertionDisputed"
      | "AssertionMade"
      | "AssertionSettled"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "assertTruth",
    values: [
      BytesLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assertTruthWithDefaults",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assertions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "burnedBondPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cachedCurrencies",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cachedIdentifiers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cachedOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultCurrency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultIdentifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultLiveness",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disputeAssertion",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "finder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAssertion",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssertionResult",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumBond",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "numericalTrue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdminProperties",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleAndGetAssertionResult",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "settleAssertion",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stampAssertion",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "syncUmaParams",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "assertTruth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertTruthWithDefaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assertions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnedBondPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cachedCurrencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cachedIdentifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cachedOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultIdentifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultLiveness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeAssertion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAssertion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssertionResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numericalTrue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdminProperties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleAndGetAssertionResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleAssertion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stampAssertion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "syncUmaParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace AdminPropertiesSetEvent {
  export type InputTuple = [
    defaultCurrency: AddressLike,
    defaultLiveness: BigNumberish,
    burnedBondPercentage: BigNumberish
  ];
  export type OutputTuple = [
    defaultCurrency: string,
    defaultLiveness: bigint,
    burnedBondPercentage: bigint
  ];
  export interface OutputObject {
    defaultCurrency: string;
    defaultLiveness: bigint;
    burnedBondPercentage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssertionDisputedEvent {
  export type InputTuple = [
    assertionId: BytesLike,
    caller: AddressLike,
    disputer: AddressLike
  ];
  export type OutputTuple = [
    assertionId: string,
    caller: string,
    disputer: string
  ];
  export interface OutputObject {
    assertionId: string;
    caller: string;
    disputer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssertionMadeEvent {
  export type InputTuple = [
    assertionId: BytesLike,
    domainId: BytesLike,
    claim: BytesLike,
    asserter: AddressLike,
    callbackRecipient: AddressLike,
    escalationManager: AddressLike,
    caller: AddressLike,
    expirationTime: BigNumberish,
    currency: AddressLike,
    bond: BigNumberish,
    identifier: BytesLike
  ];
  export type OutputTuple = [
    assertionId: string,
    domainId: string,
    claim: string,
    asserter: string,
    callbackRecipient: string,
    escalationManager: string,
    caller: string,
    expirationTime: bigint,
    currency: string,
    bond: bigint,
    identifier: string
  ];
  export interface OutputObject {
    assertionId: string;
    domainId: string;
    claim: string;
    asserter: string;
    callbackRecipient: string;
    escalationManager: string;
    caller: string;
    expirationTime: bigint;
    currency: string;
    bond: bigint;
    identifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssertionSettledEvent {
  export type InputTuple = [
    assertionId: BytesLike,
    bondRecipient: AddressLike,
    disputed: boolean,
    settlementResolution: boolean,
    settleCaller: AddressLike
  ];
  export type OutputTuple = [
    assertionId: string,
    bondRecipient: string,
    disputed: boolean,
    settlementResolution: boolean,
    settleCaller: string
  ];
  export interface OutputObject {
    assertionId: string;
    bondRecipient: string;
    disputed: boolean;
    settlementResolution: boolean;
    settleCaller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OptimisticOracleV3 extends BaseContract {
  connect(runner?: ContractRunner | null): OptimisticOracleV3;
  waitForDeployment(): Promise<this>;

  interface: OptimisticOracleV3Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  assertTruth: TypedContractMethod<
    [
      claim: BytesLike,
      asserter: AddressLike,
      callbackRecipient: AddressLike,
      escalationManager: AddressLike,
      liveness: BigNumberish,
      currency: AddressLike,
      bond: BigNumberish,
      identifier: BytesLike,
      domainId: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  assertTruthWithDefaults: TypedContractMethod<
    [claim: BytesLike, asserter: AddressLike],
    [string],
    "nonpayable"
  >;

  assertions: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        OptimisticOracleV3Interface.EscalationManagerSettingsStructOutput,
        string,
        bigint,
        boolean,
        string,
        bigint,
        boolean,
        string,
        string,
        bigint,
        string,
        string
      ] & {
        escalationManagerSettings: OptimisticOracleV3Interface.EscalationManagerSettingsStructOutput;
        asserter: string;
        assertionTime: bigint;
        settled: boolean;
        currency: string;
        expirationTime: bigint;
        settlementResolution: boolean;
        domainId: string;
        identifier: string;
        bond: bigint;
        callbackRecipient: string;
        disputer: string;
      }
    ],
    "view"
  >;

  burnedBondPercentage: TypedContractMethod<[], [bigint], "view">;

  cachedCurrencies: TypedContractMethod<
    [arg0: AddressLike],
    [[boolean, bigint] & { isWhitelisted: boolean; finalFee: bigint }],
    "view"
  >;

  cachedIdentifiers: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  cachedOracle: TypedContractMethod<[], [string], "view">;

  defaultCurrency: TypedContractMethod<[], [string], "view">;

  defaultIdentifier: TypedContractMethod<[], [string], "view">;

  defaultLiveness: TypedContractMethod<[], [bigint], "view">;

  disputeAssertion: TypedContractMethod<
    [assertionId: BytesLike, disputer: AddressLike],
    [void],
    "nonpayable"
  >;

  finder: TypedContractMethod<[], [string], "view">;

  getAssertion: TypedContractMethod<
    [assertionId: BytesLike],
    [OptimisticOracleV3Interface.AssertionStructOutput],
    "view"
  >;

  getAssertionResult: TypedContractMethod<
    [assertionId: BytesLike],
    [boolean],
    "view"
  >;

  getCurrentTime: TypedContractMethod<[], [bigint], "view">;

  getMinimumBond: TypedContractMethod<
    [currency: AddressLike],
    [bigint],
    "view"
  >;

  multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;

  numericalTrue: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAdminProperties: TypedContractMethod<
    [
      _defaultCurrency: AddressLike,
      _defaultLiveness: BigNumberish,
      _burnedBondPercentage: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  settleAndGetAssertionResult: TypedContractMethod<
    [assertionId: BytesLike],
    [boolean],
    "nonpayable"
  >;

  settleAssertion: TypedContractMethod<
    [assertionId: BytesLike],
    [void],
    "nonpayable"
  >;

  stampAssertion: TypedContractMethod<
    [assertionId: BytesLike],
    [string],
    "view"
  >;

  syncUmaParams: TypedContractMethod<
    [identifier: BytesLike, currency: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "assertTruth"
  ): TypedContractMethod<
    [
      claim: BytesLike,
      asserter: AddressLike,
      callbackRecipient: AddressLike,
      escalationManager: AddressLike,
      liveness: BigNumberish,
      currency: AddressLike,
      bond: BigNumberish,
      identifier: BytesLike,
      domainId: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "assertTruthWithDefaults"
  ): TypedContractMethod<
    [claim: BytesLike, asserter: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "assertions"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        OptimisticOracleV3Interface.EscalationManagerSettingsStructOutput,
        string,
        bigint,
        boolean,
        string,
        bigint,
        boolean,
        string,
        string,
        bigint,
        string,
        string
      ] & {
        escalationManagerSettings: OptimisticOracleV3Interface.EscalationManagerSettingsStructOutput;
        asserter: string;
        assertionTime: bigint;
        settled: boolean;
        currency: string;
        expirationTime: bigint;
        settlementResolution: boolean;
        domainId: string;
        identifier: string;
        bond: bigint;
        callbackRecipient: string;
        disputer: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "burnedBondPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "cachedCurrencies"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[boolean, bigint] & { isWhitelisted: boolean; finalFee: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "cachedIdentifiers"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "cachedOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "defaultCurrency"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "defaultIdentifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "defaultLiveness"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "disputeAssertion"
  ): TypedContractMethod<
    [assertionId: BytesLike, disputer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "finder"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAssertion"
  ): TypedContractMethod<
    [assertionId: BytesLike],
    [OptimisticOracleV3Interface.AssertionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAssertionResult"
  ): TypedContractMethod<[assertionId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getCurrentTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMinimumBond"
  ): TypedContractMethod<[currency: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "numericalTrue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAdminProperties"
  ): TypedContractMethod<
    [
      _defaultCurrency: AddressLike,
      _defaultLiveness: BigNumberish,
      _burnedBondPercentage: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "settleAndGetAssertionResult"
  ): TypedContractMethod<[assertionId: BytesLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "settleAssertion"
  ): TypedContractMethod<[assertionId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stampAssertion"
  ): TypedContractMethod<[assertionId: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "syncUmaParams"
  ): TypedContractMethod<
    [identifier: BytesLike, currency: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AdminPropertiesSet"
  ): TypedContractEvent<
    AdminPropertiesSetEvent.InputTuple,
    AdminPropertiesSetEvent.OutputTuple,
    AdminPropertiesSetEvent.OutputObject
  >;
  getEvent(
    key: "AssertionDisputed"
  ): TypedContractEvent<
    AssertionDisputedEvent.InputTuple,
    AssertionDisputedEvent.OutputTuple,
    AssertionDisputedEvent.OutputObject
  >;
  getEvent(
    key: "AssertionMade"
  ): TypedContractEvent<
    AssertionMadeEvent.InputTuple,
    AssertionMadeEvent.OutputTuple,
    AssertionMadeEvent.OutputObject
  >;
  getEvent(
    key: "AssertionSettled"
  ): TypedContractEvent<
    AssertionSettledEvent.InputTuple,
    AssertionSettledEvent.OutputTuple,
    AssertionSettledEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "AdminPropertiesSet(address,uint64,uint256)": TypedContractEvent<
      AdminPropertiesSetEvent.InputTuple,
      AdminPropertiesSetEvent.OutputTuple,
      AdminPropertiesSetEvent.OutputObject
    >;
    AdminPropertiesSet: TypedContractEvent<
      AdminPropertiesSetEvent.InputTuple,
      AdminPropertiesSetEvent.OutputTuple,
      AdminPropertiesSetEvent.OutputObject
    >;

    "AssertionDisputed(bytes32,address,address)": TypedContractEvent<
      AssertionDisputedEvent.InputTuple,
      AssertionDisputedEvent.OutputTuple,
      AssertionDisputedEvent.OutputObject
    >;
    AssertionDisputed: TypedContractEvent<
      AssertionDisputedEvent.InputTuple,
      AssertionDisputedEvent.OutputTuple,
      AssertionDisputedEvent.OutputObject
    >;

    "AssertionMade(bytes32,bytes32,bytes,address,address,address,address,uint64,address,uint256,bytes32)": TypedContractEvent<
      AssertionMadeEvent.InputTuple,
      AssertionMadeEvent.OutputTuple,
      AssertionMadeEvent.OutputObject
    >;
    AssertionMade: TypedContractEvent<
      AssertionMadeEvent.InputTuple,
      AssertionMadeEvent.OutputTuple,
      AssertionMadeEvent.OutputObject
    >;

    "AssertionSettled(bytes32,address,bool,bool,address)": TypedContractEvent<
      AssertionSettledEvent.InputTuple,
      AssertionSettledEvent.OutputTuple,
      AssertionSettledEvent.OutputObject
    >;
    AssertionSettled: TypedContractEvent<
      AssertionSettledEvent.InputTuple,
      AssertionSettledEvent.OutputTuple,
      AssertionSettledEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
