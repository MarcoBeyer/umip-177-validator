/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace RatedOracle {
  export type ViolationStruct = {
    validatorIdentifier: BytesLike;
    epochNumber: BigNumberish;
    penaltyType: BigNumberish;
    newFeeRecipientAddress: AddressLike;
  };

  export type ViolationStructOutput = [
    validatorIdentifier: string,
    epochNumber: bigint,
    penaltyType: bigint,
    newFeeRecipientAddress: string
  ] & {
    validatorIdentifier: string;
    epochNumber: bigint;
    penaltyType: bigint;
    newFeeRecipientAddress: string;
  };
}

export interface RatedOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approveProposer"
      | "approvedProposer"
      | "bondAmount"
      | "bondCurrency"
      | "challengeWindow"
      | "changeBondAmountAndCurrency"
      | "disputedReportsID"
      | "getPubkeyRoot"
      | "getViolationsForValidator"
      | "getViolationsInReport"
      | "isValidatorInDispute"
      | "numberOfViolationsForValidator"
      | "owner"
      | "pendingReportsID"
      | "postReport"
      | "priceIdentifier"
      | "removeDisputedReport"
      | "renounceOwnership"
      | "reportID"
      | "reports"
      | "revokeProposer"
      | "setChallengeWindow"
      | "setTimeToSettle"
      | "timeToSettle"
      | "transferOwnership"
      | "validatorInReport"
      | "violationsForValidator"
      | "withdrawFunds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "NewBondSet"
      | "NewChallengeWindowSet"
      | "NewTimeToSettleSet"
      | "OwnershipTransferred"
      | "ProposerApproved"
      | "ProposerRevoked"
      | "reportDiscarded"
      | "reportDisputed"
      | "reportMade"
      | "reportSettled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approveProposer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedProposer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bondAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bondCurrency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "challengeWindow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeBondAmountAndCurrency",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disputedReportsID",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPubkeyRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getViolationsForValidator",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getViolationsInReport",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidatorInDispute",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfViolationsForValidator",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingReportsID",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "postReport",
    values: [BigNumberish, BigNumberish, RatedOracle.ViolationStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "priceIdentifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeDisputedReport",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reportID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reports",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeProposer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setChallengeWindow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimeToSettle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timeToSettle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorInReport",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "violationsForValidator",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveProposer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedProposer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bondAmount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bondCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengeWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeBondAmountAndCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputedReportsID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPubkeyRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getViolationsForValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getViolationsInReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidatorInDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfViolationsForValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingReportsID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "postReport", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceIdentifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDisputedReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reportID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reports", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeProposer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChallengeWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimeToSettle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeToSettle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorInReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "violationsForValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
}

export namespace NewBondSetEvent {
  export type InputTuple = [
    _newBondAmount: BigNumberish,
    _newCurrency: AddressLike
  ];
  export type OutputTuple = [_newBondAmount: bigint, _newCurrency: string];
  export interface OutputObject {
    _newBondAmount: bigint;
    _newCurrency: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewChallengeWindowSetEvent {
  export type InputTuple = [_newChallengeWindow: BigNumberish];
  export type OutputTuple = [_newChallengeWindow: bigint];
  export interface OutputObject {
    _newChallengeWindow: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewTimeToSettleSetEvent {
  export type InputTuple = [_timeToSettle: BigNumberish];
  export type OutputTuple = [_timeToSettle: bigint];
  export interface OutputObject {
    _timeToSettle: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposerApprovedEvent {
  export type InputTuple = [_proposerApproved: AddressLike];
  export type OutputTuple = [_proposerApproved: string];
  export interface OutputObject {
    _proposerApproved: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposerRevokedEvent {
  export type InputTuple = [_proposerRevoked: AddressLike];
  export type OutputTuple = [_proposerRevoked: string];
  export interface OutputObject {
    _proposerRevoked: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace reportDiscardedEvent {
  export type InputTuple = [_reportID: BigNumberish];
  export type OutputTuple = [_reportID: bigint];
  export interface OutputObject {
    _reportID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace reportDisputedEvent {
  export type InputTuple = [_reportID: BigNumberish];
  export type OutputTuple = [_reportID: bigint];
  export interface OutputObject {
    _reportID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace reportMadeEvent {
  export type InputTuple = [_reportID: BigNumberish];
  export type OutputTuple = [_reportID: bigint];
  export interface OutputObject {
    _reportID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace reportSettledEvent {
  export type InputTuple = [_reportID: BigNumberish];
  export type OutputTuple = [_reportID: bigint];
  export interface OutputObject {
    _reportID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RatedOracle extends BaseContract {
  connect(runner?: ContractRunner | null): RatedOracle;
  waitForDeployment(): Promise<this>;

  interface: RatedOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approveProposer: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  approvedProposer: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  bondAmount: TypedContractMethod<[], [bigint], "view">;

  bondCurrency: TypedContractMethod<[], [string], "view">;

  challengeWindow: TypedContractMethod<[], [bigint], "view">;

  changeBondAmountAndCurrency: TypedContractMethod<
    [_newBondAmount: BigNumberish, _newCurrency: AddressLike],
    [void],
    "nonpayable"
  >;

  disputedReportsID: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  getPubkeyRoot: TypedContractMethod<[_pubkey: BytesLike], [string], "view">;

  getViolationsForValidator: TypedContractMethod<
    [_validatorIdentifier: BytesLike],
    [RatedOracle.ViolationStructOutput[]],
    "nonpayable"
  >;

  getViolationsInReport: TypedContractMethod<
    [_reportID: BigNumberish],
    [RatedOracle.ViolationStructOutput[]],
    "view"
  >;

  isValidatorInDispute: TypedContractMethod<
    [_validatorIdentifier: BytesLike],
    [boolean],
    "nonpayable"
  >;

  numberOfViolationsForValidator: TypedContractMethod<
    [_validatorIdentifier: BytesLike],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pendingReportsID: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  postReport: TypedContractMethod<
    [
      _fromEpoch: BigNumberish,
      _toEpoch: BigNumberish,
      _listViolations: RatedOracle.ViolationStruct[]
    ],
    [void],
    "nonpayable"
  >;

  priceIdentifier: TypedContractMethod<[], [string], "view">;

  removeDisputedReport: TypedContractMethod<
    [_index: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  reportID: TypedContractMethod<[], [bigint], "view">;

  reports: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, string] & {
        fromEpoch: bigint;
        toEpoch: bigint;
        timestamp: bigint;
        assertionID: string;
      }
    ],
    "view"
  >;

  revokeProposer: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  setChallengeWindow: TypedContractMethod<
    [_newChallengeWindow: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTimeToSettle: TypedContractMethod<
    [_timeToSettle: BigNumberish],
    [void],
    "nonpayable"
  >;

  timeToSettle: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  validatorInReport: TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [boolean],
    "view"
  >;

  violationsForValidator: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [
      [string, bigint, bigint, string] & {
        validatorIdentifier: string;
        epochNumber: bigint;
        penaltyType: bigint;
        newFeeRecipientAddress: string;
      }
    ],
    "view"
  >;

  withdrawFunds: TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish, _to: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approveProposer"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approvedProposer"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "bondAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bondCurrency"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "challengeWindow"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "changeBondAmountAndCurrency"
  ): TypedContractMethod<
    [_newBondAmount: BigNumberish, _newCurrency: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "disputedReportsID"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPubkeyRoot"
  ): TypedContractMethod<[_pubkey: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getViolationsForValidator"
  ): TypedContractMethod<
    [_validatorIdentifier: BytesLike],
    [RatedOracle.ViolationStructOutput[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getViolationsInReport"
  ): TypedContractMethod<
    [_reportID: BigNumberish],
    [RatedOracle.ViolationStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isValidatorInDispute"
  ): TypedContractMethod<
    [_validatorIdentifier: BytesLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "numberOfViolationsForValidator"
  ): TypedContractMethod<[_validatorIdentifier: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingReportsID"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "postReport"
  ): TypedContractMethod<
    [
      _fromEpoch: BigNumberish,
      _toEpoch: BigNumberish,
      _listViolations: RatedOracle.ViolationStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "priceIdentifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeDisputedReport"
  ): TypedContractMethod<[_index: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reportID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reports"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, string] & {
        fromEpoch: bigint;
        toEpoch: bigint;
        timestamp: bigint;
        assertionID: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "revokeProposer"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setChallengeWindow"
  ): TypedContractMethod<
    [_newChallengeWindow: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTimeToSettle"
  ): TypedContractMethod<[_timeToSettle: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "timeToSettle"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "validatorInReport"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "violationsForValidator"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [
      [string, bigint, bigint, string] & {
        validatorIdentifier: string;
        epochNumber: bigint;
        penaltyType: bigint;
        newFeeRecipientAddress: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish, _to: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "NewBondSet"
  ): TypedContractEvent<
    NewBondSetEvent.InputTuple,
    NewBondSetEvent.OutputTuple,
    NewBondSetEvent.OutputObject
  >;
  getEvent(
    key: "NewChallengeWindowSet"
  ): TypedContractEvent<
    NewChallengeWindowSetEvent.InputTuple,
    NewChallengeWindowSetEvent.OutputTuple,
    NewChallengeWindowSetEvent.OutputObject
  >;
  getEvent(
    key: "NewTimeToSettleSet"
  ): TypedContractEvent<
    NewTimeToSettleSetEvent.InputTuple,
    NewTimeToSettleSetEvent.OutputTuple,
    NewTimeToSettleSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProposerApproved"
  ): TypedContractEvent<
    ProposerApprovedEvent.InputTuple,
    ProposerApprovedEvent.OutputTuple,
    ProposerApprovedEvent.OutputObject
  >;
  getEvent(
    key: "ProposerRevoked"
  ): TypedContractEvent<
    ProposerRevokedEvent.InputTuple,
    ProposerRevokedEvent.OutputTuple,
    ProposerRevokedEvent.OutputObject
  >;
  getEvent(
    key: "reportDiscarded"
  ): TypedContractEvent<
    reportDiscardedEvent.InputTuple,
    reportDiscardedEvent.OutputTuple,
    reportDiscardedEvent.OutputObject
  >;
  getEvent(
    key: "reportDisputed"
  ): TypedContractEvent<
    reportDisputedEvent.InputTuple,
    reportDisputedEvent.OutputTuple,
    reportDisputedEvent.OutputObject
  >;
  getEvent(
    key: "reportMade"
  ): TypedContractEvent<
    reportMadeEvent.InputTuple,
    reportMadeEvent.OutputTuple,
    reportMadeEvent.OutputObject
  >;
  getEvent(
    key: "reportSettled"
  ): TypedContractEvent<
    reportSettledEvent.InputTuple,
    reportSettledEvent.OutputTuple,
    reportSettledEvent.OutputObject
  >;

  filters: {
    "NewBondSet(uint256,address)": TypedContractEvent<
      NewBondSetEvent.InputTuple,
      NewBondSetEvent.OutputTuple,
      NewBondSetEvent.OutputObject
    >;
    NewBondSet: TypedContractEvent<
      NewBondSetEvent.InputTuple,
      NewBondSetEvent.OutputTuple,
      NewBondSetEvent.OutputObject
    >;

    "NewChallengeWindowSet(uint64)": TypedContractEvent<
      NewChallengeWindowSetEvent.InputTuple,
      NewChallengeWindowSetEvent.OutputTuple,
      NewChallengeWindowSetEvent.OutputObject
    >;
    NewChallengeWindowSet: TypedContractEvent<
      NewChallengeWindowSetEvent.InputTuple,
      NewChallengeWindowSetEvent.OutputTuple,
      NewChallengeWindowSetEvent.OutputObject
    >;

    "NewTimeToSettleSet(uint64)": TypedContractEvent<
      NewTimeToSettleSetEvent.InputTuple,
      NewTimeToSettleSetEvent.OutputTuple,
      NewTimeToSettleSetEvent.OutputObject
    >;
    NewTimeToSettleSet: TypedContractEvent<
      NewTimeToSettleSetEvent.InputTuple,
      NewTimeToSettleSetEvent.OutputTuple,
      NewTimeToSettleSetEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProposerApproved(address)": TypedContractEvent<
      ProposerApprovedEvent.InputTuple,
      ProposerApprovedEvent.OutputTuple,
      ProposerApprovedEvent.OutputObject
    >;
    ProposerApproved: TypedContractEvent<
      ProposerApprovedEvent.InputTuple,
      ProposerApprovedEvent.OutputTuple,
      ProposerApprovedEvent.OutputObject
    >;

    "ProposerRevoked(address)": TypedContractEvent<
      ProposerRevokedEvent.InputTuple,
      ProposerRevokedEvent.OutputTuple,
      ProposerRevokedEvent.OutputObject
    >;
    ProposerRevoked: TypedContractEvent<
      ProposerRevokedEvent.InputTuple,
      ProposerRevokedEvent.OutputTuple,
      ProposerRevokedEvent.OutputObject
    >;

    "reportDiscarded(uint256)": TypedContractEvent<
      reportDiscardedEvent.InputTuple,
      reportDiscardedEvent.OutputTuple,
      reportDiscardedEvent.OutputObject
    >;
    reportDiscarded: TypedContractEvent<
      reportDiscardedEvent.InputTuple,
      reportDiscardedEvent.OutputTuple,
      reportDiscardedEvent.OutputObject
    >;

    "reportDisputed(uint256)": TypedContractEvent<
      reportDisputedEvent.InputTuple,
      reportDisputedEvent.OutputTuple,
      reportDisputedEvent.OutputObject
    >;
    reportDisputed: TypedContractEvent<
      reportDisputedEvent.InputTuple,
      reportDisputedEvent.OutputTuple,
      reportDisputedEvent.OutputObject
    >;

    "reportMade(uint256)": TypedContractEvent<
      reportMadeEvent.InputTuple,
      reportMadeEvent.OutputTuple,
      reportMadeEvent.OutputObject
    >;
    reportMade: TypedContractEvent<
      reportMadeEvent.InputTuple,
      reportMadeEvent.OutputTuple,
      reportMadeEvent.OutputObject
    >;

    "reportSettled(uint256)": TypedContractEvent<
      reportSettledEvent.InputTuple,
      reportSettledEvent.OutputTuple,
      reportSettledEvent.OutputObject
    >;
    reportSettled: TypedContractEvent<
      reportSettledEvent.InputTuple,
      reportSettledEvent.OutputTuple,
      reportSettledEvent.OutputObject
    >;
  };
}
